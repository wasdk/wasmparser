(module
  (import "env" "DYNAMICTOP_PTR" (global $global0 i32))
  (import "env" "tempDoublePtr" (global $global1 i32))
  (import "env" "ABORT" (global $global2 i32))
  (import "env" "STACKTOP" (global $global3 i32))
  (import "env" "STACK_MAX" (global $global4 i32))
  (import "env" "gb" (global $global5 i32))
  (import "env" "fb" (global $global6 i32))
  (import "global" "NaN" (global $global7 f64))
  (import "global" "Infinity" (global $global8 f64))
  (import "env" "memory" (memory $memory0 256 256))
  (import "env" "table" (table $table0 0 0 anyfunc))
  (import "env" "memoryBase" (global $global9 i32))
  (import "env" "tableBase" (global $global10 i32))
  (global $global11 (mut i32) (global.get $global0))
  (global $global12 (mut i32) (global.get $global1))
  (global $global13 (mut i32) (global.get $global2))
  (global $global14 (mut i32) (global.get $global3))
  (global $global15 (mut i32) (global.get $global4))
  (global $global16 (mut i32) (global.get $global5))
  (global $global17 (mut i32) (global.get $global6))
  (global $global18 (mut i32) (i32.const 0))
  (global $global19 (mut i32) (i32.const 0))
  (global $global20 (mut i32) (i32.const 0))
  (global $global21 (mut i32) (i32.const 0))
  (global $global22 (mut f64) (global.get $global7))
  (global $global23 (mut f64) (global.get $global8))
  (global $global24 (mut i32) (i32.const 0))
  (global $global25 (mut i32) (i32.const 0))
  (global $global26 (mut i32) (i32.const 0))
  (global $global27 (mut i32) (i32.const 0))
  (global $global28 (mut f64) (f64.const 0.0))
  (global $global29 (mut i32) (i32.const 0))
  (global $global30 (mut i32) (i32.const 0))
  (global $global31 (mut i32) (i32.const 0))
  (global $global32 (mut f64) (f64.const 0.0))
  (global $global33 (mut i32) (i32.const 0))
  (global $global34 (mut f64) (f64.const 0.0))
  (export "setThrew" (func $func4))
  (export "runPostSets" (func $func6))
  (export "establishStackSpace" (func $func3))
  (export "stackSave" (func $func1))
  (export "stackRestore" (func $func2))
  (export "_fib" (func $func5))
  (export "stackAlloc" (func $func0))
  (func $func0 (param $var0 i32) (result i32)
    (local $var1 i32)
    block
      global.get $global14
      local.set $var1
      global.get $global14
      local.get $var0
      i32.add
      global.set $global14
      global.get $global14
      i32.const 15
      i32.add
      i32.const -16
      i32.and
      global.set $global14
      local.get $var1
      return
      unreachable
    end
    unreachable
  )
  (func $func1 (result i32)
    global.get $global14
    return
  )
  (func $func2 (param $var0 i32)
    local.get $var0
    global.set $global14
  )
  (func $func3 (param $var0 i32) (param $var1 i32)
    block
      local.get $var0
      global.set $global14
      local.get $var1
      global.set $global15
    end
  )
  (func $func4 (param $var0 i32) (param $var1 i32)
    global.get $global18
    i32.const 0
    i32.eq
    if
      local.get $var0
      global.set $global18
      local.get $var1
      global.set $global19
    end
  )
  (func $func5 (param $var0 i32) (result i32)
    (local $var1 i32) (local $var2 i32) (local $var3 i32) (local $var4 i32) (local $var5 i32) (local $var6 i32) (local $var7 i32) (local $var8 i32) (local $var9 i32) (local $var10 i32) (local $var11 i32)
    block
      global.get $global14
      local.set $var11
      local.get $var0
      i32.const 0
      i32.gt_s
      local.set $var6
      local.get $var6
      if
        i32.const 0
        local.set $var1
        i32.const 1
        local.set $var5
        i32.const 0
        local.set $var8
      else
        i32.const 1
        local.set $var4
        local.get $var4
        return
      end
      loop $label1
        block $label0
          local.get $var5
          local.get $var1
          i32.add
          local.set $var3
          local.get $var8
          i32.const 1
          i32.add
          local.set $var9
          local.get $var9
          local.get $var0
          i32.eq
          local.set $var7
          local.get $var7
          if
            local.get $var3
            local.set $var4
            br $label0
          else
            local.get $var5
            local.set $var2
            local.get $var3
            local.set $var5
            local.get $var9
            local.set $var8
            local.get $var2
            local.set $var1
          end
          br $label1
        end $label0
      end $label1
      local.get $var4
      return
      unreachable
    end
    unreachable
  )
  (func $func6
    (local $var0 i32)
    nop
  )
)
